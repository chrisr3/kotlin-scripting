import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'biz.aQute.bnd.builder'
}

ext {
    // Remember where our Java executable lives (until Bnd supports Gradle toolchains).
    javaExecutable = file("${System.getProperty('java.home')}/bin/java")

    kotlinScriptClasspath = provider {
        configurations.runtimeClasspath.asPath
    }
}

dependencies {
    compileOnly "org.osgi:osgi.annotation:$osgiVersion"
    implementation project(path: ':engine', configuration: 'bundle')
    implementation project(':osgi:test-example')

    testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    testImplementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    testRuntimeOnly "org.apache.aries.spifly:org.apache.aries.spifly.dynamic.bundle:$ariesDynamicBundleVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

tasks.named('jar', Jar) {
    bnd '''\
Bundle-Name: Local Script Objects
Bundle-SymbolicName: com.example.kotlin.script.objects
'''
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
    sourceSet = sourceSets.test
    bnd '''
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
'''
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(
        sourceSets.test.runtimeClasspath,
        configurations.archives.artifacts.files,
        testingBundle
    )
    bndrun = file('tests.bndrun')
    //  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
    System.setProperty('bnd.home.dir', "$rootDir/bnd")
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    resultsDirectory = file("$testResultsDir/test")
    bundles = files(
        sourceSets.test.runtimeClasspath,
        configurations.archives.artifacts.files,
        testingBundle
    )
    bndrun = file('tests.bndrun')
}

tasks.named('test', Test) {
    dependsOn testOSGi
    enabled = false
}
